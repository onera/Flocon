@SOLVER

mesh th=readmesh("@MESH");

fespace WV(th,[P2,P2]);
fespace W(th,P2);
WV [repw,repv]=[(abs(y)<deltax/10.),(abs(y)<deltax/10.)];
W repww = (abs(y)<deltax/10.);

// Linearized Navier-Stokes operator with time-stepping
varf LKS([w,v],[w1,v1])=int1d(th,1)(-U*dx(w)*w1-mu0*exp(-x^2/d^2)*v*w1+gamma*dx(v)*dx(w1)-s*w*w1+dx(w)*dx(v1)+v*v1)+on(4,w=0,v=0);

matrix<complex> MatLKS=LKS(WV,WV,solver=GMRES);
{
    complex[int] diagofMatLKS(MatLKS.n);
    diagofMatLKS=MatLKS.diag;
    for(int ii=0; ii<MatLKS.n; ii++)
    {
      if(repw[][ii]==0.)
      {
        diagofMatLKS(ii)=1.e30;
      }
    }
    MatLKS.diag=diagofMatLKS;
}
set(MatLKS,solver=sparsesolver);

// Mass-matrix or scalar-product
varf Mass([w,v],[w1,v1])=int1d(th,1)(w*w1);
matrix<complex> MatMass=Mass(WV,WV,solver=CG);

// Quantities needed for eigenvalue solver
int nev=2;
complex[int] ev(nev);           // to store nev eigenvalues
WV<complex>[int] [w,v](nev);    // to store nev eigenvectors
int k;                          // number of converged eigenvalues

// Solving eigenvalue problem
k=EigenValue(MatLKS,MatMass,sigma=s,value=ev,vector=w,tol=0.,maxit=90000,ncv=100);
// Number of converged eigenvalues can be greater than nev
k=min(k,nev);

// file to store eigenvalues
ofstream file("vp.txt");
file.precision(16);

// Loop on converged eigenvalues
W xx=x;
for (int kk=0;kk<k;kk++)
{
// Save kkth eigenvalue
file << real(ev[kk]) << " " << imag(ev[kk]) << " " << kk << endl;
// Save kkth eigenvector
WV<complex> [ww,vv];
ww[]=w[kk][];
{
ofstream fifi("ev_"+kk+".txt");
fifi << ww[] << endl;
}
}
